#include <iostream>
#include <conio.h>
#include <string> //Библиотека для работы со строками в потоке
#include <fstream> //Библиотека для работы с потоками
#include <regex> //Библиотека для работы регулярных выражений
#include <vector>  //Библиотека для работы с динамическими массивами

using namespace std; //Подключить пространство имен std

vector<string> vct; //Задать массив обработки 

/*Эта функция открывает текстовый файл, сепарирует строки и заносит результат в вектор.
На входе путь к файлу, на выходе целочисленный вектор. */
void checkfile()
{
	char path_to_file[100];
	string line;
	cout << "Введите путь к файлу: " << endl;
	cin >> path_to_file;
	ifstream in(path_to_file); //Открыть файл для работы
	regex rgx{ "[-[:digit:]]+" }; //Задать условие разделения на последовательности положительных и отрицательных цифр
	while (getline(in, line)) //Пока не конец строки в потоке, выполнять
	{
		copy(sregex_token_iterator{ line.begin(), line.end(), rgx }, {}, back_inserter(vct)); //Сепарировать последовательность согласно условию и вносить в массив
	}
	in.close(); //Закрыть файл
}

/*Эта функция ищет максимальный элемент последовательности и выводит его в консоль.
На выходе вектор значений, на выходе - максимальный элемент и его размерность.*/
void checksequence()
{
	string str;
	int max=0;
	for (int i = 0; i < vct.size(); i++) //От 1 до последнего элемента вектора, выполнять
	{
		if (vct[i].length() > max) //Если размерность элемента вектора больше значения переменной max, то
		{
			max = vct[i].length(); //Присвоить переменной max размер текущего элемента
			str = vct[i]; //Присвоить строковой переменной значение максимального элемента вектора
		}
	}
	cout << "Количество цифр в максимальной последовательности:  " << max << endl; 
	cout << "Последовательность цифр:  " << str << endl;
}

/*Это главная функция программы*/
int main()
{
	setlocale(LC_ALL, "Russian"); //Установить русский язык в консоли
	checkfile(); //Запустить выполнение функции checkfile()
	checksequence(); //Запустить выполнение функции checksequence()
	_getch(); //Задержать окно программы
	return 0; //Вернуть 0
}
